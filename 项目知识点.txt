1.
async（可以用.then（）） 和返回promise对象的  （promise异步编程的一种解决方案）    第一反应是异步函数  要考虑到await
await 作用1.阻塞（执行顺序）  2.要异步函数的返回值

------------------------------------------------------------------------------------------------------------------
2.
art 模板文件里面的css和js路径配合 你的静态资源写绝对路径
res.render()  配合你设置的模板根目录写相对路径
------------------------------------------------------------------------------------------------------------------
3.
enctype 指定表单数据的编码类型 默认是application/x-www-from-urlencoded,
如果你要上传文件就要把表单数据上传成二进制类型multipart/from-data
------------------------------------------------------------------------------------------------------------------
4. app.use(bodyParser.urlencoded({extended:false})) 只能处理普通表单的数据  不能处理客户端传来的二进制数据（涉及到文件上传之类的）
所以我们需要formidable模块  ，对二进制数据进出处理
------------------------------------------------------------------------------------------------------------------

5.
------------------------------------------------------------------------------------------------------------------

6. 将用户名存储在请求对象中  请求路径的属性都是通用的   添加了session req才有此功能
        req.session.username=user

------------------------------------------------------------------------------------------------------------------

7.path.join(__dirname,'views')  拼路径的时候 参数,'views' 写下一层目录的时候不用写/  但是写上一层目录的时候要写../
console.log(path.join(__dirname,'/a','/b','..'));  路径开头的/不会影响拼接，..代表上一级文件，拼接出来的结果是：E:/node/1/a

------------------------------------------------------------------------------------------------------------------

8.  1.JS函数被调用时加括号，加括号表示执行的是函数里面的代码，即花括号的部分

    2.JS函数被调用时不加括号，，不加括号表示执行的是整个函数体，目的是引用,代表把这个函数赋值给某个变量

------------------------------------------------------------------------------------------------------------------


9. 静态资源路径   和模板路径
   “./”：代表目前所在的路径

   "../"：代表上一层路径

   “/”开头，代码根目录

   1.静态资源路径的填写  基于你的静态资源配置写绝对路径，因为是基于浏览器的请求地址的  以/起手 （在浏览器也可以测试,报错你就看NetWork）
   2.模板路径的填写     基于你模板的配置,填写相对路径 ，因为是基于你文件的位置  || 也可以写你所在js文件的相对位置

     res.render('admin/user.art',{ //这个是基于你配置的模板的根目录  写的相对路径
       users:users,
       page:page,
       total:total
     })

     // res.render('../../views/admin/user.art',{//这个是基于你当前所在的js文件  写的相对路径
     //   users:users,
     //   page:page,
     //   total:total
     // })

     1、加"/"代表 绝对路径,是从站点的根目录开始找http://localhost:8080/js/jquery-3.2.1.js。

     2、不加"/"代表 相对路径,是从当前路径开始找http://localhost:8080/demo/page/js/jquery-3.2.1.js。

     在这个项目中我们的根目录是 node-blog

     这里的 根目录当前你终端运行的文件夹 就是你的根目录
     还有 假如你现在的端口是80
     1.首先我们在 node-blog文件下的nodemon命令(相当于node-blog就等于了http://localhost了  http://localhost也就是当前app.js的根目录了)
     2.我们要访问public 下的admin 下的 css 下的base.css  就是/public/admin/css/base.css


------------------------------------------------------------------------------------------------------------------


     10  专门处理分页功能的模块  mongoose-sex-page分页插件
         let articles=await  pagination(Article).find().page(page).size(3).display(4).exec()

      // pagination（）里面传集合构造函数 表
      // page 指定当前页  就是显示哪一页
      // size 指定每页显示的数据条数
      // display 指定客户端要显示的页码数量
      // exec  向数据库发送查询请求 必须加在整个函数的最后面
      // pages 总页数
------------------------------------------------------------------------------------------------------------------

      11.用代码区分 开的环境(开发人员那边) 和 生产环境(挂载到网上那边)

     判断 process.env.NODE_ENV的值                 NODE_ENV系统环境变量这里只是举个例子

------------------------------------------------------------------------------------------------------------------

     12.
     Node.js 模块之 morgan中间件记录日志

     ------------------------------------------------------------------------------------------------------------------

     13. config
     他会自动对运行环境进行判断

     在程序部署过程中，不同的环境（生产环境、开发环境）程序的一些配置参数不同，比如数据库信息配置。

     对于配置的参数，我们通常使用配置文件管理。

     在nodejs中，可以使用第三方模块config模块管理操作配置文件。

     config模块的作用

     !!!!!!!!!!
     允许开发人员将不同运行环境下的应用配置信息抽离到单独的文件中
     模块内部自动判断当前应用的运行环境（环境变量配置的NODE_ENV的值是不是等于develompent等于就是开发环境，不等于就是生产环境），
     并读取对应的配置信息，极大提供应用配置信息的维护成本，避免了当运行环境重复的多次切换时，手动到项目代码中修改配置信息。

     使用步骤

     使用npm install config命令下载模块
     在项目的根目录下新建config文件夹
     在config文件夹下新建default.json、development.json、production.json文件
     在项目中通过require方法，将模块导入程序中
     使用模块内部提供的get方法获取配置信息


     扩展
     在实际开发中，对于一些敏感配置信息（如：数据库登录密码），我们一般不会选择明文写在配置文件中，而是配置在系统变量中。操作步骤如下

     在config文件夹中建立custom-environment-variables.json文件。 固定名字

     配置项属性的值填写系统环境变量的名字

     项目运行时config模块查找系统环境变量，并读取其值作为配置项的值。 要用管理员身份运行

     -------------------------------------------------------------------------------------------------------
     14.
     ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
        在使用populate 联合查询的时候 一般的使用lean()方法   涉及到分页就用使用stringfy（）和 parse（）方法


       let temp=await  pagination(Article).find().page(page).size(3).display(num).populate('author').exec()
       let str = JSON.stringify(temp);
       let articles = JSON.parse(str);
     -------------------------------------------------------------------------------------------------------
      15.
       const express=require('express')
       const app=express()

      1. app.locals 不能再路由的回调函数里使用 最好在首页使用
      2. req.app.locals 功能和app.locals一样  但只能在相关路由的回调函数里使用

     -------------------------------------------------------------------------------------------------------
     16.

      //配置session  saveUninitialized: false 当用户没登录的时候，不能保存cookies

      app.use(session({secret:'secret key',
                              saveUninitialized: false,
                              cookie:{
                              maxAge:24*60*60*1000
                              }
      }
      )
      )

     //默认是关闭了浏览器就会删除cookies,再次打开项目cookies还在
       设置了这个 作用cookie超过了这个时间才会自动删除（不管你在规定时间里关不关浏览器） 单位毫秒.

